// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.1
// Source: auth.proto

package server

import (
	"context"

	"github.com/uwu-octane/antBackend/api/v1/auth"
	"github.com/uwu-octane/antBackend/auth/internal/logic"
	"github.com/uwu-octane/antBackend/auth/internal/svc"
)

type AuthServiceServer struct {
	svcCtx *svc.ServiceContext
	auth.UnimplementedAuthServiceServer
}

func NewAuthServiceServer(svcCtx *svc.ServiceContext) *AuthServiceServer {
	return &AuthServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *AuthServiceServer) Ping(ctx context.Context, in *auth.PingReq) (*auth.PingResp, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

func (s *AuthServiceServer) Login(ctx context.Context, in *auth.LoginReq) (*auth.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *AuthServiceServer) Refresh(ctx context.Context, in *auth.RefreshReq) (*auth.LoginResp, error) {
	l := logic.NewRefreshLogic(ctx, s.svcCtx)
	return l.Refresh(in)
}

func (s *AuthServiceServer) Logout(ctx context.Context, in *auth.LogoutReq) (*auth.LogoutResp, error) {
	l := logic.NewLogoutLogic(ctx, s.svcCtx)
	return l.Logout(in)
}

func (s *AuthServiceServer) LogoutAll(ctx context.Context, in *auth.LogoutAllReq) (*auth.LogoutResp, error) {
	l := logic.NewLogoutAllLogic(ctx, s.svcCtx)
	return l.LogoutAll(in)
}
