// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.1
// Source: auth.proto

package authservice

import (
	"context"

	"github.com/uwu-octane/antBackend/api/v1/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq   = auth.LoginReq
	LoginResp  = auth.LoginResp
	PingReq    = auth.PingReq
	PingResp   = auth.PingResp
	RefreshReq = auth.RefreshReq

	AuthService interface {
		Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*LoginResp, error)
	}

	defaultAuthService struct {
		cli zrpc.Client
	}
)

func NewAuthService(cli zrpc.Client) AuthService {
	return &defaultAuthService{
		cli: cli,
	}
}

func (m *defaultAuthService) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultAuthService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultAuthService) Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.Refresh(ctx, in, opts...)
}
